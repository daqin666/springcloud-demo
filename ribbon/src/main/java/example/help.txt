1.引入依赖
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-ribbon</artifactId>
</dependency>

2.方式一
2.1 自定义规则配置类
@Configuration
public class MyRule {
    @Bean
    public IRule irule() {
        return new RandomRule();
    }
}

需要注意，自定义的规则要放在一个独立的包，要不然被目前的容器扫描到后，那么所有的ribbon负载均衡策略都会被这个自定义的影响。
也可以不单独放，全局都用这个配置

2.2 启动类注解
@RibbonClient(name = "SERVICE-USER", configuration = MyRule.class)

3.方式二
application配置文件配置规则
service-user:
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule




4.重试机制
<dependency>
    <groupId>org.springframework.retry</groupId>
    <artifactId>spring-retry</artifactId>
</dependency>

ribbon:
  ConnectTimeout: 5000          # 创建连接的超时时间，单位：ms
  ReadTimeout: 5000             # 在连接创建好以后，调用接口的超时时间，单位：ms
  MaxAutoRetries: 1             # 最大重试次数
  MaxAutoRetriesNextServer: 2   # 切换到下个实例的重试次数
  # 当请求到某个微服务5s，超时后会进行重试，先重新连接自己当前这个实例，
  # 如果失败1次后，会切换访问集群中的下一个微服务实例，切换最大2次

logging:
  level:
    root: debug