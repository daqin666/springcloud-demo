1.引入依赖
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>

2.启动类注解
@EnableEurekaServer // 开启注册中心

3.application文件配置
单例
集群

注意：
    eureka.instance.hostname 的配置，如果配置自定义的名称，则需要host文件中配置映射


4.可视化管理界面访问地址
http://ip:port


5.相关机制
    1.失效剔除
    2.自我保护
    3.region（地域）与zone（可用区）
        region和zone（或者Availability Zone）均是AWS的概念。在非AWS环境下，我们可以简单地将region理解为地域，
        zone理解成机房。一个region可以包含多个zone，可以理解为一个地域内的多个不同的机房。不同地域的距离很远，一个地域的不同
        zone间距离往往较近，也可能在同一个机房内。

        region可以通过配置文件进行配置，如果不配置，会默认使用us-east-1。同样Zone也可以配置，如果不配置，
        会默认使用defaultZone。

        Eureka Server通过eureka.client.serviceUrl.defaultZone属性设置Eureka的服务注册中心的位置。
        指定region和zone的属性如下：
        （1）eureka.client.availabilityZones.myregion=myzone# myregion是region
        （2）eureka.client.region=myregion
        Ribbon的默认策略会优先访问通客户端处于同一个region中的服务端实例，只有当同一个zone中没有可用服务端实例的时候才会访问
        其他zone中的实例。所以通过zone属性的定义，配合实际部署的物理结构，我们就可以设计出应对区域性故障的容错集群。

    4.安全验证
    我们启动了Eureka Server，然后在浏览器中输入http://localhost:8761/后，直接回车，就进入了spring cloud的服务治理页面，
    这么做在生产环境是极不安全的，下面，我们就给Eureka Server加上安全的用户认证.
    （1）pom文件中引入依赖
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    （2）serviceurl中加入安全校验信息
    eureka.client.serviceUrl.defaultZone=http://<username>:<password>@${eureka.instance.hostname}:${server.port}/eureka/

    5.服务续约
    在注册服务之后，服务提供者会维护一个心跳用来持续高速Eureka Server，“我还在持续提供服务”，否则Eureka Server的剔除
    任务会将该服务实例从服务列表中排除出去。我们称之为服务续约。
    下面是服务续约的两个重要属性：
    （1）eureka.instance.lease-expiration-duration-in-seconds
        表示eureka server至上一次收到client的心跳之后，等待下一次心跳的超时时间，在这个时间内若没收到下一次心跳，
        则将移除该instance。
        默认为90秒
        如果该值太大，则很可能将流量转发过去的时候，该instance已经不存活了。
        如果该值设置太小了，则instance则很可能因为临时的网络抖动而被摘除掉。
        该值至少应该大于leaseRenewalIntervalInSeconds
    （2）eureka.instance.lease-renewal-interval-in-seconds
        leaseRenewalIntervalInSeconds，表示eureka client发送心跳给server端的频率。
        如果在leaseExpirationDurationInSeconds后，server端没有收到client的心跳，则将摘除该instance。
        除此之外，如果该instance实现了HealthCheckCallback，并决定让自己unavailable的话，则该instance也不会接收到流量。
        默认30秒

    6.健康监测
    默认情况下，Eureka中各个服务实例的健康检测并不是通过spring-boot-acturator模块的/health端点来实现的，
    而是依靠客户端心跳的方式来保持服务实例的存活。在Eureka的服务续约与剔除机制下，客户端的健康状态从注册到注册中心开始
    都会处于UP状态，除非心跳终止一段时间之后，服务注册中心将其剔除。默认的心跳实现方式可以有效检查客户端进程是否正常运作，
    但却无法保证客户端应用能够正常提供服务。

    在Spring Cloud Eureka中，可以把Eureka客户端的健康检测交给spring-boot-actuator模块的health端点，
    以实现更加全面的健康状态维护，设置方式如下：
    （1） 在pom.xml中引入spring-boot-starter-actuator模块的依赖
        <dependency>
           <groupId>org.springframework.boot</groupId>
           <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>
    （2） 在application.properties中增加参数配置eureka.client.healthcheck.enabled=true